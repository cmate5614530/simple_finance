{"version":3,"sources":["routers/PublicRoute.js","Components/Upload.js","Components/Financ.js","routers/AppRouters.js","index.js"],"names":["PublicRoute","Component","component","rest","props","Avatar","state","imageUrl","defaultV","undefined","loading","componentDidUpdate","P_props","setState","beforeUpload","file","isJpgOrPng","type","message","error","isLt2M","size","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","handleChange","info","handleImage","originFileObj","status","uploadButton","this","className","name","listType","showUploadList","action","onChange","src","alt","style","width","React","confirm","Modal","useStyles","makeStyles","theme","container","display","gridTemplateColumns","gridGap","spacing","paper1","height","fontWeight","color","backgroundColor","indigo","paper2","teal","paper3","pink","divider","margin","root","container1","maxHeight","Financ","classes","useState","id","setId","visible","setVisible","newVisible","setNewVisible","oS","setOS","editOS","setEditOS","Date","emission","setEmission","editEmission","setEditEmission","setStatus","editStatus","setEditStatus","client","setClient","editClient","setEditClient","paymentType","setPaymentType","editPaymentType","setEditPaymentType","amount","setAmount","editAmount","setEditAmount","received","setReceived","editReceived","setEditReceived","setBalance","setEditBalance","lastPayment","setLastPayment","editLastPayment","setEditLastPayment","editOrderDetail","setEditOrderDetail","editWorkDetail","setEditWorkDetail","finance","setFinance","totalAmount","setTotalAmount","totalReceived","setTotalReceived","totalCollect","setTotalCollect","visible1","setVisible1","visibleEdit","setVisibleEdit","from","setFrom","to","setTo","page","setPage","rowsPerPage","setRowsPerPage","oSError","setOSError","statusError","setStatusError","clientError","setClientError","paymentTypeError","setPaymentTypeError","amountError","setAmountError","receivedError","setRecivedError","setImage1Error","setImage2Error","searchval","setSearchval","count","setCount","image1","setImage1","setDefaultImage1","image2","setImage2","setDefaultImage2","useEffect","fetchFinanceData","handleEditEmission","date","handleEditLastPayment","formatNumber","num","toString","replace","pad","d","fetch","then","res","json","length","i","Number","catch","console","log","submitEditHandler","e","preventDefault","data","FormData","append","method","body","showDeleteConfirm","title","onOk","headers","deleteHandler","onCancel","Grid","item","xs","Paper","fontSize","textAlign","paddingTop","paddingLeft","marginBottom","Fab","aria-label","onClick","md","utils","DateFnsUtils","justify","disableToolbar","variant","format","label","value","array","filter","fin","includes","os","KeyboardButtonProps","target","TableContainer","Table","stickyHeader","TableHead","blue","TableRow","TableCell","TableBody","slice","map","emissiondate","lastPaymentdate","editlink","balance","editableArrary","_id","editable","imgName1","imgName2","edit1","edit2","key","hover","role","tabIndex","getDate","getMonth","getFullYear","edit","TablePagination","rowsPerPageOptions","onChangePage","event","newPage","onChangeRowsPerPage","alert","encType","FormControl","InputLabel","htmlFor","Select","inputProps","MenuItem","cl","pt","min","max","disabled","href","footer","history","createHistory","AppRouter","path","Finance","exact","createMuiTheme","palette","primary","main","secondary","red","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8f05a3a.chunk.js","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\n\n\nconst PublicRoute = ({ component: Component, ...rest }) => (\n    <Route {...rest} component={(props) => (\n\n        <div >\n            \n            <Component {...props} />\n        </div>\n    )} />\n);\nexport default PublicRoute;\n","import React from 'react';\nimport { Upload, Icon, message } from 'antd';\n\n\nexport default class Avatar extends React.Component {\n  state = {\n    imageUrl: !!this.props.defaultV ? this.props.defaultV : undefined,\n    loading: false,\n  };\n\n  componentDidUpdate = (P_props) => {\n    if(P_props.defaultV !== this.props.defaultV){\n      this.setState({imageUrl: this.props.defaultV})\n    }\n  };\n  \n\n  beforeUpload = (file) => {\n\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png' || file.type === 'image/ico';\n    if (!isJpgOrPng) {\n      message.error('You can only upload JPG/PNG/ICO file!');\n    }\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n      message.error('Image must smaller than 2MB!');\n    }\n    return isJpgOrPng && isLt2M;\n  }\n\n  getBase64 = (img, callback) => {\n\n    const reader = new FileReader();\n    reader.addEventListener('load', () => callback(reader.result));\n    reader.readAsDataURL(img);\n  }\n\n  handleChange = info => {\n    this.props.handleImage(info.file.originFileObj);\n    if (info.file.status === 'uploading') {\n      this.setState({ loading: true });\n      return;\n    }\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      this.getBase64(info.file.originFileObj, imageUrl =>\n        this.setState({\n          imageUrl,\n          loading: false,\n        }),\n      );\n    }\n  };\n\n  render() {\n    //console.log('this.props.def', this.props.defaultV);\n    const uploadButton = (\n      <div>\n        <Icon type={this.state.loading ? 'loading' : 'plus'} />\n        <div className=\"ant-upload-text\">Upload</div>\n      </div>\n    );\n    const { imageUrl } = this.state;\n    return (\n      <Upload\n        name=\"avatar\"\n        type='file'\n        listType=\"picture-card\"\n        className=\"avatar-uploader\"\n        showUploadList={false}\n        action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n        beforeUpload={this.beforeUpload}\n        onChange={this.handleChange}\n      >\n        {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\n      </Upload>\n    );\n  }\n}","/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable jsx-a11y/role-has-required-aria-props */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { MDBContainer, MDBRow, MDBCol, MDBIcon, MDBInput} from 'mdbreact';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport './finance.css';\r\nimport { Modal } from 'antd';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\nimport teal from '@material-ui/core/colors/teal';\r\nimport pink from '@material-ui/core/colors/pink';\r\nimport blue from '@material-ui/core/colors/blue';\r\nimport { TablePagination } from '@material-ui/core';\r\nimport { Button } from \"antd\";\r\nimport 'date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n  } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Upload from './Upload';\r\n\r\nconst { confirm } = Modal;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n      display: 'grid',\r\n      gridTemplateColumns: 'repeat(12, 1fr)',\r\n      gridGap: theme.spacing(3),\r\n    },\r\n    paper1: {\r\n        height:'100px',\r\n        fontWeight:'bold',\r\n        color:'white',\r\n        backgroundColor:indigo[500]\r\n    },\r\n    paper2: {\r\n        height:'100px',\r\n        fontWeight:'bold',\r\n        color:'white',\r\n        backgroundColor:teal[500]\r\n    },\r\n    paper3: {\r\n        height:'100px',\r\n        fontWeight:'bold',\r\n        color:'white',\r\n        backgroundColor:pink[500]\r\n    },\r\n    divider: {\r\n      margin: theme.spacing(2, 0),\r\n    },\r\n    root: {\r\n        width: '100%',\r\n      },\r\n    container1: {\r\n        maxHeight: 600,\r\n      },\r\n  }));\r\n\r\nconst Financ = () => {\r\n    const classes = useStyles();\r\n    const [id, setId] = useState('');\r\n    const [visible, setVisible] = useState(false);\r\n    const [newVisible, setNewVisible] = useState(false);\r\n    const [oS, setOS] = useState('');\r\n    const [editOS, setEditOS] = useState('');\r\n    const [emission, setEmission] = React.useState(new Date());\r\n    const [editEmission, setEditEmission] = useState(new Date());\r\n    const [status, setStatus] = useState('');\r\n    const [editStatus, setEditStatus] = useState('');\r\n    const [client, setClient] = useState('');\r\n    const [editClient, setEditClient] = useState('');\r\n    const [paymentType, setPaymentType] = useState('');\r\n    const [editPaymentType, setEditPaymentType] = useState('');\r\n    const [amount, setAmount] = useState('');\r\n    const [editAmount, setEditAmount] = useState('');\r\n    const [received, setReceived] = useState('');\r\n    const [editReceived, setEditReceived] = useState('');\r\n    const [balance, setBalance] = useState('');\r\n    const [editBalance, setEditBalance] = useState('');\r\n    const [lastPayment, setLastPayment] = React.useState(new Date());\r\n    const [editLastPayment, setEditLastPayment] = React.useState(new Date());\r\n    const [editOrderDetail, setEditOrderDetail] = React.useState('');\r\n    const [editWorkDetail, setEditWorkDetail] = useState('');\r\n    const [orderDetail, setOrderDetail] = useState('');\r\n    const [workDetail, setWorkDetail] = useState('');\r\n\r\n    const [finance, setFinance] = useState('');\r\n\r\n    const [totalAmount, setTotalAmount] = useState(0);\r\n    const [totalReceived, setTotalReceived] = useState(0);\r\n    const [totalCollect, setTotalCollect] = useState(0);\r\n    const [visible1, setVisible1] = useState(false);\r\n    const [visibleEdit, setVisibleEdit] = useState(false);\r\n      // The first commit of Material-UI\r\n\r\n    const [from, setFrom] = React.useState(new Date('2020-01-01T00:00:00'));\r\n    const [to, setTo] = React.useState(new Date());\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  \r\n    const [oSError, setOSError] = useState('');\r\n    const [statusError, setStatusError] = useState('');\r\n    const [clientError, setClientError] = useState('');\r\n    const [paymentTypeError, setPaymentTypeError] = useState('');\r\n    const [amountError, setAmountError] = useState('');\r\n    const [receivedError, setRecivedError] = useState('');\r\n    const [image1Error, setImage1Error] = useState('');\r\n    const [image2Error, setImage2Error] = useState('');\r\n\r\n    const [searchval, setSearchval]=useState('');\r\n    const [count, setCount]=useState(0);\r\n    const [image1, setImage1]=useState('');\r\n    const [defaultimage1, setDefaultImage1] = useState(undefined);\r\n    const [image2, setImage2]=useState('');\r\n    const [defaultimage2, setDefaultImage2] = useState(undefined);\r\n    useEffect(() => {\r\n        fetchFinanceData();\r\n    }, []);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n      setPage(newPage);\r\n    };\r\n  \r\n    const handleChangeRowsPerPage = event => {\r\n      setRowsPerPage(+event.target.value);\r\n      setPage(0);\r\n    };\r\n\r\n    const handleEmission = date => {\r\n        setEmission(date);\r\n    }\r\n\r\n    const handleEditEmission = date => {\r\n        setEditEmission(date);\r\n    }\r\n    const handleLastPayment = date => {\r\n        setLastPayment(date);\r\n    }\r\n\r\n    const handleEditLastPayment = date => {\r\n        setEditLastPayment(date);\r\n    }\r\n    const handleFromDateChange = date => {\r\n        setFrom(date);\r\n        let array = finance.filter(fin=> new Date(fin.emission)-date>=0 && to-new Date(fin.emission)>=0  && (fin.client.includes(searchval)===true || fin.paymentType.includes(searchval)===true || fin.status.includes(searchval)===true || fin.os.includes(searchval)===true));\r\n        let totalAmount=0;\r\n        let totalReceived=0;\r\n        for(var i=0;i<array.length;i++){\r\n            totalAmount +=Number(array[i].amount);\r\n            totalReceived += Number(array[i].received);\r\n        }\r\n        setTotalAmount(totalAmount);\r\n        setTotalReceived(totalReceived);\r\n        setTotalCollect(Number(totalAmount)-Number(totalReceived));\r\n        setCount(array.length);\r\n    };\r\n\r\n    const handleToDateChange = date => {\r\n        setTo(date);\r\n        let array = finance.filter(fin=> new Date(fin.emission)-from>=0 && date-new Date(fin.emission)>=0  && (fin.client.includes(searchval)===true || fin.paymentType.includes(searchval)===true || fin.status.includes(searchval)===true || fin.os.includes(searchval)===true));\r\n        let totalAmount=0;\r\n        let totalReceived=0;\r\n        for(var i=0;i<array.length;i++){\r\n            totalAmount +=Number(array[i].amount);\r\n            totalReceived += Number(array[i].received);\r\n        }\r\n        setTotalAmount(totalAmount);\r\n        setTotalReceived(totalReceived);\r\n        setTotalCollect(Number(totalAmount)-Number(totalReceived));\r\n        setCount(array.length);\r\n    };\r\n\r\n    const handleSearchChange = e => {\r\n        setSearchval(e.target.value);\r\n        let array = finance.filter(fin=>new Date(fin.emission)-from>=0 && to-new Date(fin.emission)>=0 && (fin.client.includes(e.target.value)===true || fin.paymentType.includes(e.target.value)===true || fin.status.includes(e.target.value)===true || fin.os.includes(e.target.value)===true));\r\n\r\n        let totalAmount=0;\r\n        let totalReceived=0;\r\n        for(var i=0;i<array.length;i++){\r\n            totalAmount +=Number(array[i].amount);\r\n            totalReceived += Number(array[i].received);\r\n        }\r\n        setTotalAmount(totalAmount);\r\n        setTotalReceived(totalReceived);\r\n        setTotalCollect(Number(totalAmount)-Number(totalReceived));\r\n        setCount(array.length);\r\n    }\r\n\r\n    const handleImage1 = (file) => {\r\n        setImage1(file);\r\n     }\r\n\r\n    const handleImage2 = (file) => {\r\n        setImage2(file);\r\n     }\r\n    \r\n    const handleImage1Edit = (file) => {\r\n        setEditOrderDetail(file);\r\n     }\r\n\r\n    const handleImage2Edit = (file) => {\r\n        setImage2(file);\r\n        setEditWorkDetail(file);\r\n     }\r\n    function formatNumber(num) {\r\n        return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n    }\r\n\r\n    function pad(d) {\r\n        return (d < 10) ? '0' + d.toString() : d.toString();\r\n    }\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        if(oS === ''){\r\n            setOSError('Please fill this field.');\r\n        }\r\n        if(status === ''){\r\n            setStatusError('Please fill this field.');\r\n        }\r\n        if(client === ''){\r\n            setClientError('Please fill this field.');\r\n        }\r\n        if(paymentType === ''){\r\n            setPaymentTypeError('Please fill this field.');\r\n        }\r\n        if(Number(amount) <= 0){\r\n            setAmountError('Please fill this field.');\r\n        }\r\n        if(Number(amount)-Number(received) <0){\r\n            setRecivedError('invalid!');\r\n        }\r\n        if(image1 === ''){\r\n            setImage1Error('Please select the order detail image.');\r\n            alert('Please select the order detail image.');\r\n        }\r\n        if(image2 === ''){\r\n            setImage2Error('Please select the work detail image.');\r\n            alert('Please select the work detail image.');\r\n        }\r\n        if(oS !== '' && status !== '' && client !== '' && paymentType !== '' && Number(amount)>0 && Number(amount)-Number(received)>=0 && image1 !== '' && image2 !== ''){\r\n            let data = new FormData();\r\n            data.append('os', oS);\r\n            data.append('emission', emission);\r\n            data.append('status', status);\r\n            data.append('client', client);\r\n            data.append('paymentType', paymentType);\r\n            data.append('amount', amount);\r\n            data.append('received', received);\r\n            data.append('balance', Number(amount)-Number(received));\r\n            data.append('lastPayment', lastPayment);\r\n            data.append('orderDetail', image1);\r\n            data.append('workDetail', image2);\r\n            fetch('/finance', {\r\n                method: 'POST',\r\n                body: data\r\n            })\r\n                .then(res => {\r\n                    if (res.status === 200) {\r\n                        setNewVisible(false);\r\n                        fetchFinanceData();\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.log('Please check your connection');\r\n                })\r\n        }\r\n        \r\n    }\r\n\r\n    const fetchFinanceData = () => {\r\n        setOS('');\r\n        setEmission(new Date());\r\n        setStatus('');\r\n        setClient('');\r\n        setPaymentType('');\r\n        setAmount('');\r\n        setReceived(0);\r\n        setBalance(0);\r\n        setLastPayment(new Date());\r\n        setTotalAmount(0);\r\n        setTotalCollect(0);\r\n        setTotalReceived(0);\r\n        fetch(`/finance`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if(!!res.result){\r\n                    setFinance(res.result);\r\n                    setCount(res.result.length);\r\n                    let finance = res.result;\r\n                    let totalAmount=0;\r\n                    let totalReceived=0;\r\n                    for(var i=0;i<finance.length;i++){\r\n                        totalAmount +=Number(finance[i].amount);\r\n                        totalReceived += Number(finance[i].received);\r\n                    }\r\n                    setTotalAmount(totalAmount);\r\n                    setTotalReceived(totalReceived);\r\n                    setTotalCollect(Number(totalAmount)-Number(totalReceived));\r\n                }               \r\n            })\r\n            .catch(error => {\r\n                console.log('Please check your internet connection..!');\r\n            })\r\n    }\r\n    //in case of collect\r\n    const edit2 = (id) => {\r\n        let editableArrary = finance.filter(item => item._id === id);\r\n        const [editable = {}] = editableArrary;\r\n        const { _id = '', os = '',  emission = '',status='',client='',paymentType='',amount='', received='',balance='',lastPayment='', imgName1='',imgName2='' } = editable;\r\n        setId(_id);\r\n        setEditOS(os);\r\n        setEditEmission(emission);\r\n        setEditStatus(status);\r\n        setEditClient(client);\r\n        setEditPaymentType(paymentType);\r\n        setEditAmount(amount);\r\n        setEditReceived(received);\r\n        setEditBalance(balance);\r\n        setEditOrderDetail(imgName1);\r\n        setEditWorkDetail(imgName2);\r\n        setDefaultImage1(imgName1);\r\n        setDefaultImage2(imgName2);\r\n        //setEditBalance(Number(amount)-Number(received));\r\n        setEditLastPayment(lastPayment);\r\n        setVisible(!visible);\r\n    }\r\n    //in case of view\r\n    const edit1 = (id) => {\r\n        let editableArrary = finance.filter(item => item._id === id);\r\n        const [editable = {}] = editableArrary;\r\n        const { _id = '', os = '',  emission = '',status='',client='',paymentType='',amount='', received='',balance='',lastPayment='',imgName1='', imgName2=''} = editable;\r\n        setId(_id);\r\n        setEditOS(os);\r\n        setEditEmission(emission);\r\n        setEditStatus(status);\r\n        setEditClient(client);\r\n        setEditPaymentType(paymentType);\r\n        setEditAmount(amount);\r\n        setEditReceived(received);\r\n        setEditBalance(balance);\r\n        //setEditBalance(Number(amount)-Number(received));\r\n        setEditLastPayment(lastPayment);\r\n        setEditOrderDetail(imgName1);\r\n        setEditWorkDetail(imgName2);\r\n        setVisible1(!visible1);\r\n    }\r\n    //in case of edit\r\n    const edit = (id) => {\r\n        let editableArrary = finance.filter(item => item._id === id);\r\n        const [editable = {}] = editableArrary;\r\n        const { _id = '', os = '',  emission = '',status='',client='',paymentType='',amount='', received='',balance='',lastPayment='',imgName1='', imgName2='' } = editable;\r\n        setId(_id);\r\n        setEditOS(os);\r\n        setEditEmission(emission);\r\n        setEditStatus(status);\r\n        setEditClient(client);\r\n        setEditPaymentType(paymentType);\r\n        setEditAmount(amount);\r\n        setEditReceived(received);\r\n        setEditBalance(balance);\r\n        setEditOrderDetail(imgName1);\r\n        setEditWorkDetail(imgName2);\r\n        //setEditBalance(Number(amount)-Number(received));\r\n        setEditLastPayment(lastPayment);\r\n        setDefaultImage1(imgName1);\r\n        setDefaultImage2(imgName2);\r\n        setVisibleEdit(!visibleEdit);\r\n    }\r\n    const submitEditHandler = (e) => {\r\n        e.preventDefault()\r\n        let data = new FormData();\r\n        data.append('os', editOS);\r\n        data.append('emission', editEmission);\r\n        data.append('status', editStatus);\r\n        data.append('client', editClient);\r\n        data.append('paymentType', editPaymentType);\r\n        data.append('amount', editAmount);\r\n        data.append('received', editReceived);\r\n        data.append('balance', Number(editAmount)-Number(editReceived));\r\n        data.append('lastPayment', editLastPayment);\r\n        data.append('orderDetail', editOrderDetail);\r\n        data.append('workDetail', editWorkDetail);\r\n        fetch(`/finance/${id}`, {\r\n        method: 'PATCH',\r\n        body: data,\r\n        }).then(res => {\r\n            if (res.status === 201) {\r\n                setId('');\r\n                setEditOS('');\r\n                setEditEmission(new Date());\r\n                setEditStatus('');\r\n                setEditClient('');\r\n                setEditPaymentType('');\r\n                setEditAmount('');\r\n                setEditReceived('');\r\n                setEditBalance('');\r\n                setEditLastPayment(new Date());\r\n                setEditOrderDetail('');\r\n                setEditWorkDetail('');\r\n                setVisible(false);\r\n                setVisibleEdit(false);\r\n                fetchFinanceData();\r\n            }\r\n        })\r\n    }\r\n\r\n    const deleteHandler = (id) => {\r\n        fetch(`/finance/${id}`, {\r\n            method: 'DELETE',\r\n            headers: { 'content-type': 'application/json' }\r\n        })\r\n            .then(res => {\r\n                if (res.status === 200) {\r\n                    fetchFinanceData();\r\n                }\r\n            })\r\n    }\r\n    const showDeleteConfirm = (id) => {\r\n        confirm({\r\n            title: 'Do you Want to delete this item?',\r\n            onOk() {\r\n                deleteHandler(id);\r\n            },\r\n            onCancel() {\r\n                console.log('Cancel', id);\r\n            },\r\n        });\r\n    }\r\n    const addNew=()=>{\r\n        setNewVisible(true);\r\n    }\r\n\r\n    return (\r\n        <MDBContainer className=\"text-center\">\r\n            <br></br>\r\n            <br></br>\r\n            <p className=\"h4 text-center mb-4\">Finance  Management</p>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <label style={{fontWeight:'bold'}}>Total Amount</label>\r\n                    <Paper className={classes.paper1}>\r\n                        <p style={{fontSize:'15px', textAlign:'left', paddingTop:'10px',paddingLeft:'10px',marginBottom:'0px' }}>R$</p>\r\n                        <p style={{fontSize:'40px',textAlign:'center'}}>{formatNumber(totalAmount)}</p>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <label style={{fontWeight:'bold'}}>Total Received</label>\r\n                    <Paper className={classes.paper2}>\r\n                        <p style={{fontSize:'15px', textAlign:'left', paddingTop:'10px',paddingLeft:'10px',marginBottom:'0px' }}>R$</p>\r\n                        <p style={{fontSize:'40px',textAlign:'center'}}>{formatNumber(totalReceived)}</p>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <label style={{fontWeight:'bold'}}>Total To Collect</label>\r\n                    <Paper className={classes.paper3}>\r\n                        <p style={{fontSize:'15px', textAlign:'left', paddingTop:'10px',paddingLeft:'10px',marginBottom:'0px' }}>R$</p>\r\n                        <p style={{fontSize:'40px',textAlign:'center'}}>{formatNumber(totalCollect)}</p>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n            <br></br>\r\n            <br></br>\r\n            <div style={{textAlign:'left'}}>\r\n                <Fab size=\"small\" color=\"primary\" aria-label=\"add\" name=\"fabicon\" onClick={addNew}>\r\n                        <AddIcon />\r\n                </Fab>\r\n                <label style={{fontWeight:'bold'}}>&nbsp;&nbsp;Add New</label>\r\n            </div>\r\n            <br></br>\r\n            <br></br>\r\n            <MDBRow md={12}>\r\n                <MDBCol md={6}>\r\n                    <MDBRow style={{textAlign:'left'}}>\r\n                        <p style={{fontWeight:'bold'}}>&nbsp;&nbsp;Select Emission Date Period</p>\r\n                    </MDBRow>\r\n                    <MDBRow>            \r\n                        <MDBCol md={6}>\r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                <Grid container justify=\"space-around\">\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-inline1\"\r\n                                        label=\"From\"\r\n                                        value={from}\r\n                                        onChange={handleFromDateChange}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </MuiPickersUtilsProvider>\r\n                        </MDBCol>\r\n                        <MDBCol md={6}>\r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                <Grid container justify=\"space-around\">\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-inline2\"\r\n                                        label=\"To\"\r\n                                        value={to}\r\n                                        onChange={handleToDateChange}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </MuiPickersUtilsProvider>\r\n                        </MDBCol>\r\n                        {/* <MDBRow style={{paddingLeft:'65%'}}>\r\n                        <Button type=\"primary\" onClick={searchByPeriod}>\r\n                            <MDBIcon icon=\"search\" /> Search\r\n                        </Button>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <Button type=\"default\" onClick={refresh}>\r\n                            <MDBIcon icon=\"close\" /> Clear\r\n                        </Button>\r\n                        </MDBRow> */}\r\n                    </MDBRow>\r\n                </MDBCol>\r\n                <MDBCol md={6} style={{textAlign:'right'}}>\r\n                    <MDBRow>\r\n                        <p style={{fontWeight:'bold'}}>Select O.S#, Status, Client or Payment type</p>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBInput label=\"search key\" value={searchval} onChange={handleSearchChange}></MDBInput>\r\n                        {/* <Autocomplete\r\n                            style={{width:'60%'}}\r\n                            {...defaultProps}\r\n                            id=\"controlled-demo\"\r\n                            value={searchval}\r\n                            onChange={(event, newValue) => {\r\n                                setSearchval(newValue);\r\n                                console.log(newValue);\r\n                              }}\r\n                            renderInput={params => (\r\n                            <TextField {...params} label=\"O.S#, Status, Client or Payment type\" margin=\"normal\" fullWidth />\r\n                            )}\r\n                        /> */}\r\n                    </MDBRow>\r\n                </MDBCol>\r\n            </MDBRow>\r\n            <MDBRow>   \r\n                <MDBCol md=\"12\">\r\n                    <Paper className={classes.root}>\r\n                    <TableContainer className={classes.container1}>\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead style={{backgroundColor:blue[500], color:'white'}}>\r\n                            <TableRow>\r\n                                <TableCell>O.S #</TableCell>\r\n                                <TableCell>Emission</TableCell>\r\n                                <TableCell>Status</TableCell>\r\n                                <TableCell>Client</TableCell>\r\n                                <TableCell>Payment type</TableCell>\r\n                                <TableCell>Amount</TableCell>\r\n                                <TableCell>Received</TableCell>\r\n                                <TableCell>Balance</TableCell>\r\n                                <TableCell>Last Payment</TableCell>\r\n                                <TableCell>Action</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                finance.length ?\r\n                                    finance.filter(fin=> new Date(fin.emission)-from>=0 && to-new Date(fin.emission)>=0 && (fin.client.includes(searchval)===true || fin.paymentType.includes(searchval)===true || fin.status.includes(searchval)===true || fin.os.includes(searchval)===true) ).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(item => {\r\n                                        \r\n                                        var emissiondate = new Date(item.emission);\r\n                                        var lastPaymentdate = new Date(item.lastPayment);\r\n                                        var editlink = item.balance==='0'?<a style={{color:'blue'}} onClick={()=>edit1(item._id)}>View</a>:\r\n                                                                        <a style={{color:'green'}} onClick={()=>edit2(item._id)}>Collect</a>;\r\n                                        return (\r\n                                            <TableRow key={item._id} hover role=\"checkbox\" tabIndex={-1}>\r\n                                                <TableCell>{item.os}</TableCell>\r\n                                                <TableCell>{pad(emissiondate.getDate())}/{pad(emissiondate.getMonth()+1)}/{emissiondate.getFullYear()}</TableCell>\r\n                                                <TableCell>{item.status}</TableCell>\r\n                                                <TableCell>{item.client}</TableCell>\r\n                                                <TableCell>{item.paymentType}</TableCell>\r\n                                                <TableCell>{item.amount}</TableCell>\r\n                                                <TableCell>{item.received}</TableCell>\r\n                                                <TableCell>{item.balance}</TableCell>\r\n                                                <TableCell>{pad(lastPaymentdate.getDate())}/{pad(lastPaymentdate.getMonth()+1)}/{lastPaymentdate.getFullYear()}</TableCell>\r\n                                                <TableCell>\r\n                                                    {/* <DeleteForeverIcon onClick={() => showDeleteConfirm(item._id)} /> */}\r\n                                                    {editlink}\r\n                                                    &nbsp;&nbsp;\r\n                                                    <a style={{color:'brown'}} onClick={()=>edit(item._id)}>Edit</a>\r\n                                                    &nbsp;&nbsp;\r\n                                                    <a style={{color:'red'}} onClick={()=>showDeleteConfirm(item._id)}>Delete</a>\r\n                                                    {/* <EditIcon onClick={() => edit(item._id)} /> */}\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        )\r\n                                    })\r\n                                    : null\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n                    </Paper>\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[10, 25, 100]}\r\n                        component=\"div\"\r\n                        count={count}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onChangePage={handleChangePage}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    />\r\n                </MDBCol>\r\n            </MDBRow>\r\n            <Modal\r\n                visible={newVisible}\r\n                title=\"Add New \"\r\n                onOk={submitHandler}\r\n                onCancel={() => { \r\n                    setOS('');\r\n                    setEmission(new Date());\r\n                    setStatus('');\r\n                    setClient('');\r\n                    setPaymentType('');\r\n                    setAmount('');\r\n                    setReceived('');\r\n                    setBalance(0);\r\n                    setLastPayment(new Date());\r\n                    setOSError('');\r\n                    setStatusError('');\r\n                    setClientError('');\r\n                    setPaymentTypeError('');\r\n                    setAmountError('');\r\n                    setRecivedError('');\r\n                    setImage1Error('');\r\n                    setImage2Error('');\r\n                    setNewVisible(!newVisible); }}\r\n            >\r\n                <form encType='multipart/form-data'>\r\n\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\"  style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Service Order Number\"\r\n                                type=\"number\"\r\n                                value={oS}\r\n                                onChange={(e) => {\r\n                                    let os = e.target.value;\r\n                                    setOS(os);\r\n                                    setOSError('');\r\n                                }}\r\n                                />\r\n                            <p style={{color:'red'}}>{oSError}</p>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\">\r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                <Grid container justify=\"space-around\">\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-inline3\"\r\n                                        label=\"Emission Date\"\r\n                                        value={emission}\r\n                                        onChange={handleEmission}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </MuiPickersUtilsProvider>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            {/* <MDBInput\r\n                                label=\"Status\"\r\n                                type=\"text\"\r\n                                value={status}\r\n                                onChange={(e) => {\r\n                                    let status = e.target.value;\r\n                                    setStatus(status);\r\n                                }}\r\n                                /> */}\r\n                                <br></br>\r\n                                <FormControl style={{ width: '100%', textAlign: 'left' }}>\r\n                                <InputLabel htmlFor=\"Status\" style={{ width: '100%', textAlign: 'left' }}>Status</InputLabel>\r\n                                <Select\r\n                                    style={{ width: '100%', textAlign: 'left' }}\r\n                                    value={status}\r\n                                    inputProps={{\r\n                                        name: 'Status',\r\n                                        id: 'Status',\r\n                                    }}\r\n                                    onChange={(e) => {\r\n                                        let status = e.target.value;\r\n                                        setStatus(status);\r\n                                        setStatusError('');\r\n                                    }}\r\n                                    >\r\n                                    <MenuItem value=\"paid\">paid</MenuItem>\r\n                                    <MenuItem value=\"partial\">partial</MenuItem>\r\n                                    <MenuItem value=\"open\">open</MenuItem>\r\n                                    <MenuItem value=\"full\">full</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                            <p style={{color:'red'}}>{statusError}</p>\r\n                        </MDBCol>\r\n                    \r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Client\"\r\n                                type=\"text\"\r\n                                value={client}\r\n                                onChange={(e) => {\r\n                                    let cl = e.target.value;\r\n                                    setClient(cl);\r\n                                    setClientError('');\r\n                                }}\r\n                                />\r\n                            <p style={{color:'red'}}>{clientError}</p>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                        <br></br>\r\n                            <FormControl style={{ width: '100%', textAlign: 'left' }}>\r\n                                <InputLabel htmlFor=\"PaymentType\" style={{ width: '100%', textAlign: 'left' }}>Payment Type</InputLabel>\r\n                                <Select\r\n                                    style={{ width: '100%', textAlign: 'left' }}\r\n                                    value={paymentType}\r\n                                    inputProps={{\r\n                                        name: 'PaymentType',\r\n                                        id: 'PaymentType',\r\n                                    }}\r\n                                    onChange={(e) => {\r\n                                        let pt = e.target.value;\r\n                                        setPaymentType(pt);\r\n                                        setPaymentTypeError('');\r\n                                    }}\r\n                                    >\r\n                                    <MenuItem value=\"cash\">cash</MenuItem>\r\n                                    <MenuItem value=\"mix\">mix</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                            <p style={{color:'red'}}>{paymentTypeError}</p>\r\n                        </MDBCol>\r\n                    \r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Amount\"\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                value={amount}\r\n                                onChange={(e) => {\r\n                                    let amount = e.target.value;\r\n                                    setAmount(amount);\r\n                                    setAmountError('');\r\n                                }}\r\n                                />\r\n                            <p style={{color:'red'}}>{amountError}</p>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Received\"\r\n                                type=\"number\"\r\n                                min=\"0\"\r\n                                max={amount}\r\n                                value={received}\r\n                                onChange={(e) => {\r\n                                    let received = e.target.value;\r\n                                    setReceived(received);\r\n                                }}\r\n                                />\r\n                            <p style={{color:'red'}}>{receivedError}</p>\r\n                        </MDBCol>\r\n                    \r\n                    <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Balance\"\r\n                                type=\"number\"\r\n                                disabled\r\n                                value={Number(amount)-Number(received)}\r\n                                \r\n                                />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" >\r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                <Grid container justify=\"space-around\">\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-inline4\"\r\n                                        label=\"Last Payment Date\"\r\n                                        value={lastPayment}\r\n                                        onChange={handleLastPayment}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </MuiPickersUtilsProvider>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        \r\n                        <MDBCol md=\"6\">\r\n                        <br></br>\r\n                            <label>Order Detail</label>\r\n                            <Upload handleImage={handleImage1}/>\r\n                            {/* <p>{image1Error}</p> */}\r\n                        </MDBCol>\r\n                        <MDBCol md=\"6\">\r\n                        <br></br>\r\n                            <label>Work Detail</label>\r\n                            <Upload handleImage={handleImage2}/>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </form>\r\n            </Modal>\r\n            <Modal\r\n                visible={visible}\r\n                title=\"Collect Payment \"\r\n                onOk={submitEditHandler}\r\n                onCancel={() => { \r\n                    setEditOS('');\r\n                    setEditEmission(new Date());\r\n                    setEditStatus('');\r\n                    setEditClient('');\r\n                    setEditPaymentType('');\r\n                    setEditAmount('');\r\n                    setEditReceived('');\r\n                    setEditBalance('');\r\n                    setEditLastPayment(new Date());\r\n                    setVisible(!visible); }}\r\n            >\r\n                <form encType='multipart/form-data'>\r\n\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\"  style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Service Order Number\"\r\n                                type=\"number\"\r\n                                disabled\r\n                                value={editOS}\r\n                                onChange={(e) => {\r\n                                    let os = e.target.value;\r\n                                    setOS(os);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\">\r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                <Grid container justify=\"space-around\">\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-inline5\"\r\n                                        label=\"Emission Date\"\r\n                                        value={editEmission}\r\n                                        disabled\r\n                                        onChange={handleEditEmission}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </MuiPickersUtilsProvider>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            {/* <MDBInput\r\n                                label=\"Status\"\r\n                                type=\"text\"\r\n                                value={editStatus}\r\n                                disabled\r\n                                onChange={(e) => {\r\n                                    let status = e.target.value;\r\n                                    setStatus(status);\r\n                                }}\r\n                                /> */}\r\n                            <br></br>\r\n                            <FormControl style={{ width: '100%', textAlign: 'left' }}>\r\n                                <InputLabel htmlFor=\"Status\" style={{ width: '100%', textAlign: 'left' }}>Status</InputLabel>\r\n                                <Select\r\n                                    style={{ width: '100%', textAlign: 'left' }}\r\n                                    value={editStatus}\r\n                                    inputProps={{\r\n                                        name: 'Status',\r\n                                        id: 'Status',\r\n                                    }}\r\n                                    onChange={(e) => {\r\n                                        let status = e.target.value;\r\n                                        setEditStatus(status);\r\n                                        //setStatusError('');\r\n                                    }}\r\n                                    >\r\n                                    <MenuItem value=\"paid\">paid</MenuItem>\r\n                                    <MenuItem value=\"partial\">partial</MenuItem>\r\n                                    <MenuItem value=\"open\">open</MenuItem>\r\n                                    <MenuItem value=\"full\">full</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n\r\n                        </MDBCol>\r\n                    \r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Client\"\r\n                                type=\"text\"\r\n                                value={editClient}\r\n                                disabled\r\n                                onChange={(e) => {\r\n                                    let cl = e.target.value;\r\n                                    setClient(cl);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            {/* <MDBInput\r\n                                label=\"Payment Type\"\r\n                                type=\"text\"\r\n                                value={editPaymentType}\r\n                                onChange={(e) => {\r\n                                    let pt = e.target.value;\r\n                                    setEditPaymentType(pt);\r\n                                }}\r\n                                /> */}\r\n                                <br></br>\r\n                            <FormControl style={{ width: '100%', textAlign: 'left' }}>\r\n                                <InputLabel htmlFor=\"PaymentType\" style={{ width: '100%', textAlign: 'left' }}>Payment Type</InputLabel>\r\n                                <Select\r\n                                    style={{ width: '100%', textAlign: 'left' }}\r\n                                    value={editPaymentType}\r\n                                    inputProps={{\r\n                                        name: 'PaymentType',\r\n                                        id: 'PaymentType',\r\n                                    }}\r\n                                    onChange={(e) => {\r\n                                        let pt = e.target.value;\r\n                                        setEditPaymentType(pt);\r\n                                        //setPaymentTypeError('');\r\n                                    }}\r\n                                    >\r\n                                    <MenuItem value=\"cash\">cash</MenuItem>\r\n                                    <MenuItem value=\"mix\">mix</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </MDBCol>\r\n                    \r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Amount\"\r\n                                type=\"number\"\r\n                                \r\n                                value={editAmount}\r\n                                onChange={(e) => {\r\n                                    let amount = e.target.value;\r\n                                    setEditAmount(amount);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Received\"\r\n                                type=\"number\"\r\n                                value={editReceived}\r\n                                onChange={(e) => {\r\n                                    let received = e.target.value;\r\n                                    setEditReceived(received);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    \r\n                    <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Balance\"\r\n                                type=\"number\"\r\n                                value={Number(editAmount)-Number(editReceived)}\r\n                                disabled\r\n                                onChange={(e) => {\r\n                                    let balance = e.target.value;\r\n                                    setBalance(balance);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" >\r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                <Grid container justify=\"space-around\">\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-inline6\"\r\n                                        label=\"Last Payment Date\"\r\n                                        value={editLastPayment}\r\n                                        onChange={handleEditLastPayment}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </MuiPickersUtilsProvider>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\">\r\n                            <br></br>\r\n                            <a href={editOrderDetail}>Order Detail</a>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"6\">\r\n                            <br></br>\r\n                            <a href={editWorkDetail}>Work Detail</a>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </form>\r\n            </Modal>\r\n            <Modal\r\n                visible={visibleEdit}\r\n                title=\"Edit\"\r\n                onOk={submitEditHandler}\r\n                onCancel={() => { \r\n                    setEditOS('');\r\n                    setEditEmission(new Date());\r\n                    setEditStatus('');\r\n                    setEditClient('');\r\n                    setEditPaymentType('');\r\n                    setEditAmount('');\r\n                    setEditReceived('');\r\n                    setEditBalance('');\r\n                    setEditLastPayment(new Date());\r\n                    setEditWorkDetail('');\r\n                    setEditOrderDetail('');\r\n                    setVisibleEdit(!visibleEdit); }}\r\n            >\r\n                <form encType='multipart/form-data'>\r\n\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\"  style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Service Order Number\"\r\n                                type=\"number\"\r\n                                value={editOS}\r\n                                onChange={(e) => {\r\n                                    let os = e.target.value;\r\n                                    setEditOS(os);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\">\r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                <Grid container justify=\"space-around\">\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-inline5\"\r\n                                        label=\"Emission Date\"\r\n                                        value={editEmission}\r\n                                        onChange={handleEditEmission}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </MuiPickersUtilsProvider>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            {/* <MDBInput\r\n                                label=\"Status\"\r\n                                type=\"text\"\r\n                                value={editStatus}\r\n                                disabled\r\n                                onChange={(e) => {\r\n                                    let status = e.target.value;\r\n                                    setStatus(status);\r\n                                }}\r\n                                /> */}\r\n                            <br></br>\r\n                            <FormControl style={{ width: '100%', textAlign: 'left' }}>\r\n                                <InputLabel htmlFor=\"Status\" style={{ width: '100%', textAlign: 'left' }}>Status</InputLabel>\r\n                                <Select\r\n                                    style={{ width: '100%', textAlign: 'left' }}\r\n                                    value={editStatus}\r\n                                    inputProps={{\r\n                                        name: 'Status',\r\n                                        id: 'Status',\r\n                                    }}\r\n                                    onChange={(e) => {\r\n                                        let status = e.target.value;\r\n                                        setEditStatus(status);\r\n                                        //setStatusError('');\r\n                                    }}\r\n                                    >\r\n                                    <MenuItem value=\"paid\">paid</MenuItem>\r\n                                    <MenuItem value=\"partial\">partial</MenuItem>\r\n                                    <MenuItem value=\"open\">open</MenuItem>\r\n                                    <MenuItem value=\"full\">full</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n\r\n                        </MDBCol>\r\n                    \r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Client\"\r\n                                type=\"text\"\r\n                                value={editClient}\r\n                                onChange={(e) => {\r\n                                    let cl = e.target.value;\r\n                                    setEditClient(cl);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            {/* <MDBInput\r\n                                label=\"Payment Type\"\r\n                                type=\"text\"\r\n                                value={editPaymentType}\r\n                                onChange={(e) => {\r\n                                    let pt = e.target.value;\r\n                                    setEditPaymentType(pt);\r\n                                }}\r\n                                /> */}\r\n                                <br></br>\r\n                            <FormControl style={{ width: '100%', textAlign: 'left' }}>\r\n                                <InputLabel htmlFor=\"PaymentType\" style={{ width: '100%', textAlign: 'left' }}>Payment Type</InputLabel>\r\n                                <Select\r\n                                    style={{ width: '100%', textAlign: 'left' }}\r\n                                    value={editPaymentType}\r\n                                    inputProps={{\r\n                                        name: 'PaymentType',\r\n                                        id: 'PaymentType',\r\n                                    }}\r\n                                    onChange={(e) => {\r\n                                        let pt = e.target.value;\r\n                                        setEditPaymentType(pt);\r\n                                        //setPaymentTypeError('');\r\n                                    }}\r\n                                    >\r\n                                    <MenuItem value=\"cash\">cash</MenuItem>\r\n                                    <MenuItem value=\"mix\">mix</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </MDBCol>\r\n                    \r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Amount\"\r\n                                type=\"number\"\r\n                                \r\n                                value={editAmount}\r\n                                onChange={(e) => {\r\n                                    let amount = e.target.value;\r\n                                    setEditAmount(amount);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Received\"\r\n                                type=\"number\"\r\n                                value={editReceived}\r\n                                onChange={(e) => {\r\n                                    let received = e.target.value;\r\n                                    setEditReceived(received);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    \r\n                    <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Balance\"\r\n                                type=\"number\"\r\n                                value={Number(editAmount)-Number(editReceived)}\r\n                                disabled\r\n                                onChange={(e) => {\r\n                                    let balance = e.target.value;\r\n                                    setEditBalance(balance);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" >\r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                <Grid container justify=\"space-around\">\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-inline6\"\r\n                                        label=\"Last Payment Date\"\r\n                                        value={editLastPayment}\r\n                                        onChange={handleEditLastPayment}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </MuiPickersUtilsProvider>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\">\r\n                            <br></br>\r\n                            <a href={editOrderDetail}>Order Detail</a>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"6\">\r\n                            <br></br>\r\n                            <a href={editWorkDetail}>Work Detail</a>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </form>\r\n            </Modal>\r\n            <Modal\r\n                visible={visible1}\r\n                title=\"View Payment \"\r\n                footer={null}\r\n                onCancel={() => { \r\n                    setVisible1(!visible1); }}\r\n            >\r\n                <form encType='multipart/form-data'>\r\n\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\"  style={{textAlign:'left'}}>\r\n                        \r\n                            <MDBInput\r\n                                label=\"Service Order Number\"\r\n                                type=\"number\"\r\n                                disabled\r\n                                value={editOS}\r\n                                onChange={(e) => {\r\n                                    let os = e.target.value;\r\n                                    setOS(os);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\">\r\n                            \r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                <Grid container justify=\"space-around\">\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-inline5\"\r\n                                        label=\"Emission Date\"\r\n                                        value={editEmission}\r\n                                        disabled\r\n                                        onChange={handleEditEmission}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </MuiPickersUtilsProvider>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            \r\n                            <MDBInput\r\n                                label=\"Status\"\r\n                                type=\"text\"\r\n                                value={editStatus}\r\n                                disabled\r\n                                onChange={(e) => {\r\n                                    let status = e.target.value;\r\n                                    setStatus(status);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    \r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            \r\n                            <MDBInput\r\n                                label=\"Client\"\r\n                                type=\"text\"\r\n                                value={editClient}\r\n                                disabled\r\n                                onChange={(e) => {\r\n                                    let cl = e.target.value;\r\n                                    setClient(cl);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Payment Type\"\r\n                                type=\"text\"\r\n                                disabled\r\n                                value={editPaymentType}\r\n                                onChange={(e) => {\r\n                                    let pt = e.target.value;\r\n                                    setEditPaymentType(pt);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    \r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Amount\"\r\n                                type=\"number\"\r\n                                disabled\r\n                                value={editAmount}\r\n                                onChange={(e) => {\r\n                                    let amount = e.target.value;\r\n                                    setEditAmount(amount);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Received\"\r\n                                type=\"number\"\r\n                                value={editReceived}\r\n                                disabled\r\n                                onChange={(e) => {\r\n                                    let received = e.target.value;\r\n                                    setEditReceived(received);\r\n                                }}\r\n                                />\r\n                        </MDBCol>\r\n                    \r\n                        <MDBCol md=\"6\" style={{textAlign:'left'}}>\r\n                            <MDBInput\r\n                                label=\"Balance\"\r\n                                type=\"number\"\r\n                                value={Number(editAmount)-Number(editReceived)}\r\n                                disabled\r\n                                />\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\" >\r\n                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                <Grid container justify=\"space-around\">\r\n                                    <KeyboardDatePicker\r\n                                        disableToolbar\r\n                                        disabled\r\n                                        variant=\"inline\"\r\n                                        format=\"dd/MM/yyyy\"\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-inline6\"\r\n                                        label=\"Last Payment Date\"\r\n                                        value={editLastPayment}\r\n                                        KeyboardButtonProps={{\r\n                                            'aria-label': 'change date',\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </MuiPickersUtilsProvider>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\">\r\n                            <br></br>\r\n                            <a href={editOrderDetail}>Order Detail</a>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"6\">\r\n                            <br></br>\r\n                            <a href={editWorkDetail}>Work Detail</a>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </form>\r\n            </Modal>\r\n\r\n        </MDBContainer>\r\n    );\r\n};\r\n\r\nexport default Financ;","import React from 'react';\nimport { Router, Switch } from 'react-router-dom';\nimport { createBrowserHistory as createHistory } from 'history';\nimport PublicRoute from './PublicRoute';\nimport  '../Components/editor.css';\nimport Finance from '../Components/Financ';\n\nexport const history = createHistory();\nclass AppRouter extends React.Component {\n\n  render() {\n    return (\n      <Router history={history} > \n        <div>\n          <Switch>\n            <PublicRoute path=\"/\" component={Finance} exact={true} />\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n};\nexport default AppRouter;\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport { red, blue } from '@material-ui/core/colors'\nimport AppRouter from './routers/AppRouters';\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./Components/index.css\"\nconst theme = createMuiTheme({\n  palette: {\n    primary:{\n    main: blue[500]\n},\n    secondary: red,\n    type: 'light'\n  },\n  spacing: 10\n})\n\nrender(\n  <MuiThemeProvider theme={theme}>\n    <AppRouter />\n  </MuiThemeProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}